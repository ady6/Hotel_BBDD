-- creo bbdd hotel
CREATE DATABASE HOTEL;
USE HOTEL;

-- creo tabla cliente
CREATE TABLE CLIENTE ( 
	NIF CHAR(9) PRIMARY KEY, 
	NOMBRE VARCHAR(25) NOT NULL, 
	TLF VARCHAR(25),
	CIUDAD VARCHAR(50),
    	PAIS VARCHAR(50)
); 

-- inserto clientes en la tabla cliente
INSERT INTO CLIENTE VALUES 
("11111111A", "Nastassja Kinski", "23452345234", "Berlín", "Alemania");
INSERT INTO CLIENTE VALUES 
("22222222A", "Nadia Hilker", "434563546345", "Múnich", "Alemania");
INSERT INTO CLIENTE VALUES 
("33333333A", "Amelia González", "66669182374", "Madrid", "España");
INSERT INTO CLIENTE VALUES 
("44444444A", "Antonio Banderas", "81762398471", "Málaga", "España");
INSERT INTO CLIENTE VALUES 
("55555555A", "Robert De Niro", "2934752985", "Nueva York", "EE.UU.");
INSERT INTO CLIENTE VALUES 
("66666666A", "Joaquin Phoenix", "2345234545", "San Diego", "Puerto Rico");

-- creo la tabla habitacion
CREATE TABLE HABITACION (
    NUMERO TINYINT PRIMARY KEY,
    NIF CHAR(9),
    FECHA DATETIME,
    FOREIGN KEY (NIF) REFERENCES CLIENTE(NIF),
    PERSONAS TINYINT DEFAULT 2,
    PRECIO FLOAT
);

-- procedimiento almacenado para construir las habitaciones del hotel atendiendo a especificaciones

CREATE DEFINER=`root`@`localhost` PROCEDURE `HABITACION_HOTEL`()
BEGIN
DECLARE NUM TINYINT DEFAULT 2;
DECLARE CAPACIDAD TINYINT;
DECLARE PREC FLOAT;

DROP TABLE IF EXISTS HABITACION;
CREATE TABLE HABITACION (
    NUMERO TINYINT PRIMARY KEY,
    NIF CHAR(9),
    FECHA DATETIME,
    FOREIGN KEY (NIF) REFERENCES CLIENTE(NIF),
    PERSONAS TINYINT DEFAULT 2,
    PRECIO FLOAT
);

START TRANSACTION;
SET NUM=9;
	WHILE (NUM<29) DO
		SET NUM = NUM + 1;
		SET CAPACIDAD=2;
		SET PREC=80;
        INSERT INTO HABITACION VALUES (NUM, NULL, NULL, CAPACIDAD, PREC);
	END WHILE;
SET NUM=29;
    WHILE (NUM<39) DO
		SET NUM = NUM + 1;
		SET CAPACIDAD=3;
		SET PREC=90;
        INSERT INTO HABITACION VALUES (NUM, NULL, NULL, CAPACIDAD, PREC);
	END WHILE;
SET NUM=39;
    WHILE (NUM<49) DO
		SET NUM = NUM + 1;
		SET CAPACIDAD=4;
		SET PREC=100;
		INSERT INTO HABITACION VALUES (NUM, NULL, NULL, CAPACIDAD, PREC);
	END WHILE;
COMMIT;
END


-- alojo clientes

SET SQL_SAFE_UPDATES = 0;

UPDATE HABITACION
SET NIF="55555555A", FECHA=NOW()
WHERE NUMERO=12;

UPDATE HABITACION
SET NIF="66666666A", FECHA=NOW()
WHERE NUMERO=36;

UPDATE HABITACION
SET NIF="44444444A", FECHA=NOW()
WHERE NUMERO=42;


-- relación de habitaciones ocupadas junto al nombre del cliente

SELECT HABITACION.NUMERO, HABITACION.NIF, 
HABITACION.FECHA, HABITACION.PERSONAS,
HABITACION.PRECIO, CLIENTE.NOMBRE
FROM HABITACION
INNER JOIN CLIENTE
ON HABITACION.NIF=CLIENTE.NIF
WHERE HABITACION.NIF IS NOT NULL;


-- número de clientes que tiene el hotel por cada país

SELECT PAIS, COUNT(NIF) AS CLIENTES
FROM CLIENTE
GROUP BY PAIS;


-- relación con los clientes cuyo nombre empieza por la letra A

SELECT * FROM hotel.cliente
WHERE NOMBRE LIKE 'A%';


-- creo tabla salida

CREATE TABLE SALIDA (
    IDSALIDA INT PRIMARY KEY AUTO_INCREMENT,
    FECHA_ENTRADA DATETIME,
    FECHA_SALIDA DATETIME,
    NIF CHAR(9),
    FOREIGN KEY (NIF) REFERENCES CLIENTE(NIF),
    NUMERO TINYINT,
    FOREIGN KEY (NUMERO) REFERENCES HABITACION(NUMERO),
    PRECIO FLOAT
);


-- función que reciba como argumento un número de habitación y registre la salida del cliente realizando ciertas tareas

CREATE DEFINER=`root`@`localhost` FUNCTION `SALIDA_CLIENTE`(NUM TINYINT) RETURNS char(80) CHARSET utf8mb4
    READS SQL DATA
BEGIN
DECLARE SALIDA CHAR(80);
DECLARE NIFVISITANTE CHAR(9);
DECLARE FECHAVISITANTE DATETIME;
DECLARE PRECIOHABITACION FLOAT;

SELECT NIF FROM HABITACION
WHERE NUM = NUMERO INTO NIFVISITANTE;
SELECT FECHA FROM HABITACION
WHERE NUM = NUMERO INTO FECHAVISITANTE;
SELECT PRECIO FROM HABITACION
WHERE NUM = NUMERO INTO PRECIOHABITACION;

IF NIFVISITANTE is not null then
	INSERT INTO SALIDA (FECHA_ENTRADA, FECHA_SALIDA, NIF, NUMERO, PRECIO) VALUES (FECHAVISITANTE, NOW(), NIFVISITANTE,
    NUM, PRECIOHABITACION);
    UPDATE HABITACION SET NIF=NULL, FECHA=NULL WHERE NUMERO=NUM;
    SET SALIDA="La habitación ha sido desocupada";
ELSE
    SET SALIDA="La habitación está libre";
END IF;

RETURN SALIDA;
END


-- relación de salidas del hotel incluyendo algunos datos del cliente

SELECT SALIDA.FECHA_ENTRADA, SALIDA.FECHA_SALIDA, SALIDA.NIF,
CLIENTE.NOMBRE, CLIENTE.PAIS, SALIDA.NUMERO, SALIDA.PRECIO
FROM SALIDA INNER JOIN CLIENTE
ON CLIENTE.NIF=SALIDA.NIF;


-- cambiar las fechas de entrada de modo que no sean igual a las fechas de salida

UPDATE SALIDA SET FECHA_ENTRADA = '2021-03-12 17:26:07' WHERE IDSALIDA = 1
UPDATE SALIDA SET FECHA_ENTRADA = '2021-03-13 17:26:08' WHERE IDSALIDA = 2
UPDATE SALIDA SET FECHA_ENTRADA = '2021-03-11 17:26:08' WHERE IDSALIDA = 3


-- número de días de estancia de cada cliente y el importe

SELECT SALIDA.FECHA_ENTRADA, SALIDA.FECHA_SALIDA, SALIDA.NIF,
CLIENTE.NOMBRE, CLIENTE.PAIS, SALIDA.NUMERO, SALIDA.PRECIO,
DATEDIFF(SALIDA.FECHA_SALIDA, SALIDA.FECHA_ENTRADA) AS DIAS, ((DATEDIFF(SALIDA.FECHA_SALIDA, SALIDA.FECHA_ENTRADA))*PRECIO) AS IMPORTE
FROM SALIDA INNER JOIN CLIENTE
ON CLIENTE.NIF=SALIDA.NIF;


-- importe total recaudado en el hotel, es decir, la suma de todos los importes

SELECT SUM((DATEDIFF(SALIDA.FECHA_SALIDA, SALIDA.FECHA_ENTRADA))*PRECIO) AS IMPORTE_TOTAL
FROM SALIDA;


-- vuelvo a alojar a Antonio Banderas en otra habitación de la tercera planta y después obtengo una relación solo
-- con las habitaciones de la tercera planta incluyendo el nombre del cliente

UPDATE HABITACION
SET NIF="44444444A", FECHA=NOW()
WHERE NUMERO=32;

SELECT HABITACION.NUMERO, HABITACION.PERSONAS, HABITACION.PRECIO,
HABITACION.NIF, CLIENTE.NOMBRE FROM HABITACION LEFT JOIN CLIENTE
ON CLIENTE.NIF=HABITACION.NIF
WHERE PERSONAS = 3



